import os
import pandas as pd
import tempfile
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from telethon import TelegramClient
from docx import Document
import nltk
from nltk.tokenize import sent_tokenize

# -----------------------------
# NLTK
# -----------------------------
nltk.download("punkt")
nltk.download("stopwords")

# -----------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------
api_id = os.getenv("TELEGRAM_API_ID")
api_hash = os.getenv("TELEGRAM_API_HASH")

# -----------------------------
# Conversation states
# -----------------------------
WAITING_FOR_FILE = 1
WAITING_FOR_INTERVAL = 2
WAITING_FOR_CUSTOM_INTERVAL_FROM = 3
WAITING_FOR_CUSTOM_INTERVAL_TO = 4
WAITING_FOR_KEYWORDS = 5
WAITING_FOR_PHONE = 6  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# -----------------------------
# Start & cancel handlers
# -----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890).")
    return WAITING_FOR_PHONE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# -----------------------------
# Request phone number
# -----------------------------
async def request_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890):")
    return WAITING_FOR_PHONE

async def handle_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_number = update.message.text.strip()
    if phone_number:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º TelegramClient
        client = TelegramClient('session_name', int(api_id), api_hash)
        await client.start(phone=phone_number)  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data["client"] = client

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        return WAITING_FOR_FILE
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return WAITING_FOR_PHONE

# -----------------------------
# Handle Excel file
# -----------------------------
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª.")
        return WAITING_FOR_FILE

    with tempfile.NamedTemporaryFile(delete=False) as tf:
        tg_file = await document.get_file()
        await tg_file.download_to_drive(tf.name)
        file_path = tf.name

    ext = os.path.splitext(document.file_name)[-1].lower()
    try:
        if ext == ".xlsx":
            df = pd.read_excel(file_path, engine="openpyxl")
        elif ext == ".xls":
            df = pd.read_excel(file_path, engine="xlrd")
        else:
            await update.message.reply_text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .xls –∏–ª–∏ .xlsx")
            return WAITING_FOR_FILE
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel: {e}")
        return WAITING_FOR_FILE

    context.user_data["channels"] = df

    keyboard = [
        [InlineKeyboardButton("–°—É—Ç–∫–∏", callback_data="interval_day")],
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="interval_week")],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="interval_month")],
        [InlineKeyboardButton("–ó–∞–¥–∞–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="interval_custom")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=reply_markup)
    return WAITING_FOR_INTERVAL

# -----------------------------
# Interval handlers
# -----------------------------
async def interval_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.replace("interval_", "")
    if data == "custom":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
        return WAITING_FOR_CUSTOM_INTERVAL_FROM
    else:
        context.user_data["interval"] = data
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return WAITING_FOR_KEYWORDS

async def custom_interval_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["custom_from"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return WAITING_FOR_CUSTOM_INTERVAL_TO

async def custom_interval_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    custom_from = context.user_data.get("custom_from")
    custom_to = update.message.text.strip()
    context.user_data["interval"] = (custom_from, custom_to)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    return WAITING_FOR_KEYWORDS

# -----------------------------
# Generate digest
# -----------------------------
async def handle_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keywords = [k.strip() for k in update.message.text.split(",") if k.strip()]
    context.user_data["keywords"] = keywords

    await update.message.reply_text(
        "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–¥–∞–Ω ‚úÖ\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n\n–ì–æ—Ç–æ–≤–ª—é –¥–∞–π–¥–∂–µ—Å—Ç...",
        reply_markup=ReplyKeyboardRemove()
    )

    digest_path = await generate_digest(context.user_data)

    if digest_path and os.path.exists(digest_path):
        await update.message.reply_document(open(digest_path, "rb"), filename="digest.docx")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç üò¢")

    return ConversationHandler.END

# -----------------------------
# Telegram post fetching + summarization
# -----------------------------
async def get_posts(client, channel_link, interval):
    await client.start()
    channel = await client.get_entity(channel_link)
    now = datetime.utcnow()

    if interval == "day":
        start_date = now - timedelta(days=1)
    elif interval == "week":
        start_date = now - timedelta(weeks=1)
    elif interval == "month":
        start_date = now - timedelta(days=30)
    elif isinstance(interval, tuple):
        start_date = datetime.fromisoformat(interval[0])
        end_date = datetime.fromisoformat(interval[1])
    else:
        start_date = now - timedelta(days=1)
    end_date = now if not isinstance(interval, tuple) else end_date

    posts_text = []
    async for message in client.iter_messages(channel, offset_date=end_date, reverse=True):
        if message.date < start_date:
            break
        if message.text:
            posts_text.append((message.date, message.text))
    return posts_text

def summarize_text(text, keywords=None):
    sentences = sent_tokenize(text)
    if keywords:
        keywords = [k.lower() for k in keywords]
        filtered = [s for s in sentences if any(k in s.lower() for k in keywords)]
        return "\n".join(filtered[:5])
    else:
        return "\n".join(sentences[:5])

async def generate_digest(user_data):
    channels = user_data.get("channels")
    interval = user_data.get("interval")
    keywords = user_data.get("keywords", [])

    if channels is None or not keywords:
        return None

    client = user_data.get("client")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π client

    digest_text = "üìå –î–∞–π–¥–∂–µ—Å—Ç –ø–æ –≤–∞—à–∏–º –∫–∞–Ω–∞–ª–∞–º:\n\n"

    for _, row in channels.iterrows():
        channel_name = row[0]
        channel_link = row[1]
        posts = await get_posts(client, channel_link, interval)
        if not posts:
            digest_text += f"{channel_name} ({channel_link}): –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
            continue
        digest_text += f"--- {channel_name} ({channel_link}) ---\n"
        for date, text in posts:
            if text:
                summary = summarize_text(text, keywords)
                digest_text += f"{date.date()}: {summary}\n"
            else:
                digest_text += f"{date.date()}: (–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"

    output_dir = "/app/data"
    os.makedirs(output_dir, exist_ok=True)
    digest_path = os.path.join(output_dir, "digest.docx")

    doc = Document()
    doc.add_heading("–î–∞–π–¥–∂–µ—Å—Ç", 0)
    doc.add_paragraph(digest_text)
    doc.save(digest_path)

    return digest_path

# -----------------------------
# Main
# -----------------------------
async def main():
    # –°—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ run_polling
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_API_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone_number)],
            WAITING_FOR_FILE: [MessageHandler(filters.Document.ALL, handle_file)],
            WAITING_FOR_INTERVAL: [CallbackQueryHandler(interval_callback, pattern=r"^interval_")],
            WAITING_FOR_CUSTOM_INTERVAL_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_interval_from)],
            WAITING_FOR_CUSTOM_INTERVAL_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_interval_to)],
            WAITING_FOR_KEYWORDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keywords)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await application.run_polling()

# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–∑—ã–≤–∞–µ–º main
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å asyncio